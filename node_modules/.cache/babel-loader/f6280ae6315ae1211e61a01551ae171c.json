{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/arjuna/Desktop/Untitled Folder/internship-project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/arjuna/Desktop/Untitled Folder/internship-project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/arjuna/Desktop/Untitled Folder/internship-project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/arjuna/Desktop/Untitled Folder/internship-project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/arjuna/Desktop/Untitled Folder/internship-project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events');\n\nvar PoolResource = require('./pool-resource');\n\nvar SMTPConnection = require('../smtp-connection');\n\nvar wellKnown = require('../well-known');\n\nvar shared = require('../shared');\n\nvar packageData = require('../../package.json');\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\n\n\nvar SMTPPool =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(SMTPPool, _EventEmitter);\n\n  function SMTPPool(options) {\n    var _this;\n\n    _classCallCheck(this, SMTPPool);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SMTPPool).call(this));\n    options = options || {};\n\n    if (typeof options === 'string') {\n      options = {\n        url: options\n      };\n    }\n\n    var urlData;\n    var service = options.service;\n\n    if (typeof options.getSocket === 'function') {\n      _this.getSocket = options.getSocket;\n    }\n\n    if (options.url) {\n      urlData = shared.parseConnectionUrl(options.url);\n      service = service || urlData.service;\n    }\n\n    _this.options = shared.assign(false, // create new object\n    options, // regular options\n    urlData, // url options\n    service && wellKnown(service) // wellknown options\n    );\n    _this.options.maxConnections = _this.options.maxConnections || 5;\n    _this.options.maxMessages = _this.options.maxMessages || 100;\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'smtp-pool'\n    }); // temporary object\n\n    var connection = new SMTPConnection(_this.options);\n    _this.name = 'SMTP (pool)';\n    _this.version = packageData.version + '[client:' + connection.version + ']';\n    _this._rateLimit = {\n      counter: 0,\n      timeout: null,\n      waiting: [],\n      checkpoint: false,\n      delta: Number(_this.options.rateDelta) || 1000,\n      limit: Number(_this.options.rateLimit) || 0\n    };\n    _this._closed = false;\n    _this._queue = [];\n    _this._connections = [];\n    _this._connectionCounter = 0;\n    _this.idling = true;\n    setImmediate(function () {\n      if (_this.idling) {\n        _this.emit('idle');\n      }\n    });\n    return _this;\n  }\n  /**\n   * Placeholder function for creating proxy sockets. This method immediatelly returns\n   * without a socket\n   *\n   * @param {Object} options Connection options\n   * @param {Function} callback Callback function to run with the socket keys\n   */\n\n\n  _createClass(SMTPPool, [{\n    key: \"getSocket\",\n    value: function getSocket(options, callback) {\n      // return immediatelly\n      return setImmediate(function () {\n        return callback(null, false);\n      });\n    }\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this2 = this;\n\n      if (this._closed) {\n        return false;\n      }\n\n      this._queue.push({\n        mail: mail,\n        callback: callback\n      });\n\n      if (this.idling && this._queue.length >= this.options.maxConnections) {\n        this.idling = false;\n      }\n\n      setImmediate(function () {\n        return _this2._processMessages();\n      });\n      return true;\n    }\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this3 = this;\n\n      var connection;\n      var len = this._connections.length;\n      this._closed = true; // clear rate limit timer if it exists\n\n      clearTimeout(this._rateLimit.timeout);\n\n      if (!len && !this._queue.length) {\n        return;\n      } // remove all available connections\n\n\n      for (var i = len - 1; i >= 0; i--) {\n        if (this._connections[i] && this._connections[i].available) {\n          connection = this._connections[i];\n          connection.close();\n          this.logger.info({\n            tnx: 'connection',\n            cid: connection.id,\n            action: 'removed'\n          }, 'Connection #%s removed', connection.id);\n        }\n      }\n\n      if (len && !this._connections.length) {\n        this.logger.debug({\n          tnx: 'connection'\n        }, 'All connections removed');\n      }\n\n      if (!this._queue.length) {\n        return;\n      } // make sure that entire queue would be cleaned\n\n\n      var invokeCallbacks = function invokeCallbacks() {\n        if (!_this3._queue.length) {\n          _this3.logger.debug({\n            tnx: 'connection'\n          }, 'Pending queue entries cleared');\n\n          return;\n        }\n\n        var entry = _this3._queue.shift();\n\n        if (entry && typeof entry.callback === 'function') {\n          try {\n            entry.callback(new Error('Connection pool was closed'));\n          } catch (E) {\n            _this3.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n        }\n\n        setImmediate(invokeCallbacks);\n      };\n\n      setImmediate(invokeCallbacks);\n    }\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */\n\n  }, {\n    key: \"_processMessages\",\n    value: function _processMessages() {\n      var _this4 = this;\n\n      var connection;\n      var i, len; // do nothing if already closed\n\n      if (this._closed) {\n        return;\n      } // do nothing if queue is empty\n\n\n      if (!this._queue.length) {\n        if (!this.idling) {\n          // no pending jobs\n          this.idling = true;\n          this.emit('idle');\n        }\n\n        return;\n      } // find first available connection\n\n\n      for (i = 0, len = this._connections.length; i < len; i++) {\n        if (this._connections[i].available) {\n          connection = this._connections[i];\n          break;\n        }\n      }\n\n      if (!connection && this._connections.length < this.options.maxConnections) {\n        connection = this._createConnection();\n      }\n\n      if (!connection) {\n        // no more free connection slots available\n        this.idling = false;\n        return;\n      } // check if there is free space in the processing queue\n\n\n      if (!this.idling && this._queue.length < this.options.maxConnections) {\n        this.idling = true;\n        this.emit('idle');\n      }\n\n      var entry = connection.queueEntry = this._queue.shift();\n\n      entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n      connection.available = false;\n      this.logger.debug({\n        tnx: 'pool',\n        cid: connection.id,\n        messageId: entry.messageId,\n        action: 'assign'\n      }, 'Assigned message <%s> to #%s (%s)', entry.messageId, connection.id, connection.messages + 1);\n\n      if (this._rateLimit.limit) {\n        this._rateLimit.counter++;\n\n        if (!this._rateLimit.checkpoint) {\n          this._rateLimit.checkpoint = Date.now();\n        }\n      }\n\n      connection.send(entry.mail, function (err, info) {\n        // only process callback if current handler is not changed\n        if (entry === connection.queueEntry) {\n          try {\n            entry.callback(err, info);\n          } catch (E) {\n            _this4.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n\n          connection.queueEntry = false;\n        }\n      });\n    }\n    /**\n     * Creates a new pool resource\n     */\n\n  }, {\n    key: \"_createConnection\",\n    value: function _createConnection() {\n      var _this5 = this;\n\n      var connection = new PoolResource(this);\n      connection.id = ++this._connectionCounter;\n      this.logger.info({\n        tnx: 'pool',\n        cid: connection.id,\n        action: 'conection'\n      }, 'Created new pool resource #%s', connection.id); // resource comes available\n\n      connection.on('available', function () {\n        _this5.logger.debug({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'available'\n        }, 'Connection #%s became available', connection.id);\n\n        if (_this5._closed) {\n          // if already closed run close() that will remove this connections from connections list\n          _this5.close();\n        } else {\n          // check if there's anything else to send\n          _this5._processMessages();\n        }\n      }); // resource is terminated with an error\n\n      connection.once('error', function (err) {\n        if (err.code !== 'EMAXLIMIT') {\n          _this5.logger.error({\n            err: err,\n            tnx: 'pool',\n            cid: connection.id\n          }, 'Pool Error for #%s: %s', connection.id, err.message);\n        } else {\n          _this5.logger.debug({\n            tnx: 'pool',\n            cid: connection.id,\n            action: 'maxlimit'\n          }, 'Max messages limit exchausted for #%s', connection.id);\n        }\n\n        if (connection.queueEntry) {\n          try {\n            connection.queueEntry.callback(err);\n          } catch (E) {\n            _this5.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n\n          connection.queueEntry = false;\n        } // remove the erroneus connection from connections list\n\n\n        _this5._removeConnection(connection);\n\n        _this5._continueProcessing();\n      });\n      connection.once('close', function () {\n        _this5.logger.info({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'closed'\n        }, 'Connection #%s was closed', connection.id);\n\n        _this5._removeConnection(connection);\n\n        if (connection.queueEntry) {\n          // If the connection closed when sending, add the message to the queue again\n          // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n          // in the next event loop\n          setTimeout(function () {\n            if (connection.queueEntry) {\n              _this5.logger.debug({\n                tnx: 'pool',\n                cid: connection.id,\n                messageId: connection.queueEntry.messageId,\n                action: 'requeue'\n              }, 'Re-queued message <%s> for #%s', connection.queueEntry.messageId, connection.id);\n\n              _this5._queue.unshift(connection.queueEntry);\n\n              connection.queueEntry = false;\n            }\n\n            _this5._continueProcessing();\n          }, 50);\n        } else {\n          _this5._continueProcessing();\n        }\n      });\n\n      this._connections.push(connection);\n\n      return connection;\n    }\n    /**\n     * Continue to process message if the pool hasn't closed\n     */\n\n  }, {\n    key: \"_continueProcessing\",\n    value: function _continueProcessing() {\n      var _this6 = this;\n\n      if (this._closed) {\n        this.close();\n      } else {\n        setTimeout(function () {\n          return _this6._processMessages();\n        }, 100);\n      }\n    }\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */\n\n  }, {\n    key: \"_removeConnection\",\n    value: function _removeConnection(connection) {\n      var index = this._connections.indexOf(connection);\n\n      if (index !== -1) {\n        this._connections.splice(index, 1);\n      }\n    }\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */\n\n  }, {\n    key: \"_checkRateLimit\",\n    value: function _checkRateLimit(callback) {\n      var _this7 = this;\n\n      if (!this._rateLimit.limit) {\n        return callback();\n      }\n\n      var now = Date.now();\n\n      if (this._rateLimit.counter < this._rateLimit.limit) {\n        return callback();\n      }\n\n      this._rateLimit.waiting.push(callback);\n\n      if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n        return this._clearRateLimit();\n      } else if (!this._rateLimit.timeout) {\n        this._rateLimit.timeout = setTimeout(function () {\n          return _this7._clearRateLimit();\n        }, this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n        this._rateLimit.checkpoint = now;\n      }\n    }\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */\n\n  }, {\n    key: \"_clearRateLimit\",\n    value: function _clearRateLimit() {\n      clearTimeout(this._rateLimit.timeout);\n      this._rateLimit.timeout = null;\n      this._rateLimit.counter = 0;\n      this._rateLimit.checkpoint = false; // resume all paused connections\n\n      while (this._rateLimit.waiting.length) {\n        var cb = this._rateLimit.waiting.shift();\n\n        setImmediate(cb);\n      }\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */\n\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this.idling;\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var _this8 = this;\n\n      var promise;\n\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n\n      var auth = new PoolResource(this).auth;\n      this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n\n        var options = _this8.options;\n\n        if (socketOptions && socketOptions.connection) {\n          _this8.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n\n          options = shared.assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n\n        var connection = new SMTPConnection(options);\n        var returned = false;\n        connection.once('error', function (err) {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          connection.close();\n          return callback(err);\n        });\n        connection.once('end', function () {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          return callback(new Error('Connection closed'));\n        });\n\n        var finalize = function finalize() {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          connection.quit();\n          return callback(null, true);\n        };\n\n        connection.connect(function () {\n          if (returned) {\n            return;\n          }\n\n          if (auth && connection.allowsAuth) {\n            connection.login(auth, function (err) {\n              if (returned) {\n                return;\n              }\n\n              if (err) {\n                returned = true;\n                connection.close();\n                return callback(err);\n              }\n\n              finalize();\n            });\n          } else {\n            finalize();\n          }\n        });\n      });\n      return promise;\n    }\n  }]);\n\n  return SMTPPool;\n}(EventEmitter); // expose to the world\n\n\nmodule.exports = SMTPPool;","map":{"version":3,"sources":["/home/arjuna/Desktop/Untitled Folder/internship-project/node_modules/nodemailer/lib/smtp-pool/index.js"],"names":["EventEmitter","require","PoolResource","SMTPConnection","wellKnown","shared","packageData","SMTPPool","options","url","urlData","service","getSocket","parseConnectionUrl","assign","maxConnections","maxMessages","logger","getLogger","component","connection","name","version","_rateLimit","counter","timeout","waiting","checkpoint","delta","Number","rateDelta","limit","rateLimit","_closed","_queue","_connections","_connectionCounter","idling","setImmediate","emit","callback","mail","push","length","_processMessages","len","clearTimeout","i","available","close","info","tnx","cid","id","action","debug","invokeCallbacks","entry","shift","Error","E","error","err","message","_createConnection","queueEntry","messageId","getHeader","replace","messages","Date","now","send","on","once","code","_removeConnection","_continueProcessing","setTimeout","unshift","index","indexOf","splice","_clearRateLimit","cb","promise","Promise","resolve","reject","callbackPromise","auth","socketOptions","remoteAddress","remotePort","destHost","host","destPort","port","Object","keys","forEach","key","returned","finalize","quit","connect","allowsAuth","login","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst PoolResource = require('./pool-resource');\nconst SMTPConnection = require('../smtp-connection');\nconst wellKnown = require('../well-known');\nconst shared = require('../shared');\nconst packageData = require('../../package.json');\n\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\nclass SMTPPool extends EventEmitter {\n    constructor(options) {\n        super();\n\n        options = options || {};\n        if (typeof options === 'string') {\n            options = {\n                url: options\n            };\n        }\n\n        let urlData;\n        let service = options.service;\n\n        if (typeof options.getSocket === 'function') {\n            this.getSocket = options.getSocket;\n        }\n\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n\n        this.options = shared.assign(\n            false, // create new object\n            options, // regular options\n            urlData, // url options\n            service && wellKnown(service) // wellknown options\n        );\n\n        this.options.maxConnections = this.options.maxConnections || 5;\n        this.options.maxMessages = this.options.maxMessages || 100;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-pool'\n        });\n\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n\n        this.name = 'SMTP (pool)';\n        this.version = packageData.version + '[client:' + connection.version + ']';\n\n        this._rateLimit = {\n            counter: 0,\n            timeout: null,\n            waiting: [],\n            checkpoint: false,\n            delta: Number(this.options.rateDelta) || 1000,\n            limit: Number(this.options.rateLimit) || 0\n        };\n        this._closed = false;\n        this._queue = [];\n        this._connections = [];\n        this._connectionCounter = 0;\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */\n    getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(() => callback(null, false));\n    }\n\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (this._closed) {\n            return false;\n        }\n\n        this._queue.push({\n            mail,\n            callback\n        });\n\n        if (this.idling && this._queue.length >= this.options.maxConnections) {\n            this.idling = false;\n        }\n\n        setImmediate(() => this._processMessages());\n\n        return true;\n    }\n\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */\n    close() {\n        let connection;\n        let len = this._connections.length;\n        this._closed = true;\n\n        // clear rate limit timer if it exists\n        clearTimeout(this._rateLimit.timeout);\n\n        if (!len && !this._queue.length) {\n            return;\n        }\n\n        // remove all available connections\n        for (let i = len - 1; i >= 0; i--) {\n            if (this._connections[i] && this._connections[i].available) {\n                connection = this._connections[i];\n                connection.close();\n                this.logger.info(\n                    {\n                        tnx: 'connection',\n                        cid: connection.id,\n                        action: 'removed'\n                    },\n                    'Connection #%s removed',\n                    connection.id\n                );\n            }\n        }\n\n        if (len && !this._connections.length) {\n            this.logger.debug(\n                {\n                    tnx: 'connection'\n                },\n                'All connections removed'\n            );\n        }\n\n        if (!this._queue.length) {\n            return;\n        }\n\n        // make sure that entire queue would be cleaned\n        let invokeCallbacks = () => {\n            if (!this._queue.length) {\n                this.logger.debug(\n                    {\n                        tnx: 'connection'\n                    },\n                    'Pending queue entries cleared'\n                );\n                return;\n            }\n            let entry = this._queue.shift();\n            if (entry && typeof entry.callback === 'function') {\n                try {\n                    entry.callback(new Error('Connection pool was closed'));\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n            }\n            setImmediate(invokeCallbacks);\n        };\n        setImmediate(invokeCallbacks);\n    }\n\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */\n    _processMessages() {\n        let connection;\n        let i, len;\n\n        // do nothing if already closed\n        if (this._closed) {\n            return;\n        }\n\n        // do nothing if queue is empty\n        if (!this._queue.length) {\n            if (!this.idling) {\n                // no pending jobs\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        // find first available connection\n        for (i = 0, len = this._connections.length; i < len; i++) {\n            if (this._connections[i].available) {\n                connection = this._connections[i];\n                break;\n            }\n        }\n\n        if (!connection && this._connections.length < this.options.maxConnections) {\n            connection = this._createConnection();\n        }\n\n        if (!connection) {\n            // no more free connection slots available\n            this.idling = false;\n            return;\n        }\n\n        // check if there is free space in the processing queue\n        if (!this.idling && this._queue.length < this.options.maxConnections) {\n            this.idling = true;\n            this.emit('idle');\n        }\n\n        let entry = (connection.queueEntry = this._queue.shift());\n        entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n\n        connection.available = false;\n\n        this.logger.debug(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                messageId: entry.messageId,\n                action: 'assign'\n            },\n            'Assigned message <%s> to #%s (%s)',\n            entry.messageId,\n            connection.id,\n            connection.messages + 1\n        );\n\n        if (this._rateLimit.limit) {\n            this._rateLimit.counter++;\n            if (!this._rateLimit.checkpoint) {\n                this._rateLimit.checkpoint = Date.now();\n            }\n        }\n\n        connection.send(entry.mail, (err, info) => {\n            // only process callback if current handler is not changed\n            if (entry === connection.queueEntry) {\n                try {\n                    entry.callback(err, info);\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n                connection.queueEntry = false;\n            }\n        });\n    }\n\n    /**\n     * Creates a new pool resource\n     */\n    _createConnection() {\n        let connection = new PoolResource(this);\n\n        connection.id = ++this._connectionCounter;\n\n        this.logger.info(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                action: 'conection'\n            },\n            'Created new pool resource #%s',\n            connection.id\n        );\n\n        // resource comes available\n        connection.on('available', () => {\n            this.logger.debug(\n                {\n                    tnx: 'connection',\n                    cid: connection.id,\n                    action: 'available'\n                },\n                'Connection #%s became available',\n                connection.id\n            );\n\n            if (this._closed) {\n                // if already closed run close() that will remove this connections from connections list\n                this.close();\n            } else {\n                // check if there's anything else to send\n                this._processMessages();\n            }\n        });\n\n        // resource is terminated with an error\n        connection.once('error', err => {\n            if (err.code !== 'EMAXLIMIT') {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'pool',\n                        cid: connection.id\n                    },\n                    'Pool Error for #%s: %s',\n                    connection.id,\n                    err.message\n                );\n            } else {\n                this.logger.debug(\n                    {\n                        tnx: 'pool',\n                        cid: connection.id,\n                        action: 'maxlimit'\n                    },\n                    'Max messages limit exchausted for #%s',\n                    connection.id\n                );\n            }\n\n            if (connection.queueEntry) {\n                try {\n                    connection.queueEntry.callback(err);\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n                connection.queueEntry = false;\n            }\n\n            // remove the erroneus connection from connections list\n            this._removeConnection(connection);\n\n            this._continueProcessing();\n        });\n\n        connection.once('close', () => {\n            this.logger.info(\n                {\n                    tnx: 'connection',\n                    cid: connection.id,\n                    action: 'closed'\n                },\n                'Connection #%s was closed',\n                connection.id\n            );\n\n            this._removeConnection(connection);\n\n            if (connection.queueEntry) {\n                // If the connection closed when sending, add the message to the queue again\n                // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n                // in the next event loop\n                setTimeout(() => {\n                    if (connection.queueEntry) {\n                        this.logger.debug(\n                            {\n                                tnx: 'pool',\n                                cid: connection.id,\n                                messageId: connection.queueEntry.messageId,\n                                action: 'requeue'\n                            },\n                            'Re-queued message <%s> for #%s',\n                            connection.queueEntry.messageId,\n                            connection.id\n                        );\n                        this._queue.unshift(connection.queueEntry);\n                        connection.queueEntry = false;\n                    }\n                    this._continueProcessing();\n                }, 50);\n            } else {\n                this._continueProcessing();\n            }\n        });\n\n        this._connections.push(connection);\n\n        return connection;\n    }\n\n    /**\n     * Continue to process message if the pool hasn't closed\n     */\n    _continueProcessing() {\n        if (this._closed) {\n            this.close();\n        } else {\n            setTimeout(() => this._processMessages(), 100);\n        }\n    }\n\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */\n    _removeConnection(connection) {\n        let index = this._connections.indexOf(connection);\n\n        if (index !== -1) {\n            this._connections.splice(index, 1);\n        }\n    }\n\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */\n    _checkRateLimit(callback) {\n        if (!this._rateLimit.limit) {\n            return callback();\n        }\n\n        let now = Date.now();\n\n        if (this._rateLimit.counter < this._rateLimit.limit) {\n            return callback();\n        }\n\n        this._rateLimit.waiting.push(callback);\n\n        if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n            return this._clearRateLimit();\n        } else if (!this._rateLimit.timeout) {\n            this._rateLimit.timeout = setTimeout(() => this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n            this._rateLimit.checkpoint = now;\n        }\n    }\n\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */\n    _clearRateLimit() {\n        clearTimeout(this._rateLimit.timeout);\n        this._rateLimit.timeout = null;\n        this._rateLimit.counter = 0;\n        this._rateLimit.checkpoint = false;\n\n        // resume all paused connections\n        while (this._rateLimit.waiting.length) {\n            let cb = this._rateLimit.waiting.shift();\n            setImmediate(cb);\n        }\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        let auth = new PoolResource(this).auth;\n\n        this.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            let connection = new SMTPConnection(options);\n            let returned = false;\n\n            connection.once('error', err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n\n            connection.once('end', () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error('Connection closed'));\n            });\n\n            let finalize = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n\n            connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (auth && connection.allowsAuth) {\n                    connection.login(auth, err => {\n                        if (returned) {\n                            return;\n                        }\n\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n\n                        finalize();\n                    });\n                } else {\n                    finalize();\n                }\n            });\n        });\n\n        return promise;\n    }\n}\n\n// expose to the world\nmodule.exports = SMTPPool;\n"]},"metadata":{},"sourceType":"script"}